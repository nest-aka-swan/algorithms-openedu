def merge_sort(start, end):
    current = numbers[start:end]
    if len(current) < 2:
        f.write('{} {} {} {}\n'.format(start + 1, end, current[0], current[0]))
        return current
    merged = []
    mid = len(current) // 2

    arr_l = merge_sort(start, start + len(current[:mid]))
    arr_r = merge_sort(end - len(current[mid:]), end)

    i = 0
    j = 0
    while i < len(arr_l) and j < len(arr_r):
        if arr_l[i] < arr_r[j]:
            if len(merged) < 1:
                new_start = start
            merged.append(arr_l[i])
            i += 1
        else:
            if len(merged) < 1:
                new_start = end - mid
            merged.append(arr_r[j])
            j += 1
    if i is not len(arr_l):
        merged += arr_l[i:]
        new_end = start + mid
    if j is not len(arr_r):
        merged += arr_r[j:]
        new_end = end
    f.write('{} {} {} {}\n'.format(new_start + 1, new_end, merged[0], merged[-1]))
    return merged

f = open('sort.in', 'r')

_, numbers = f.readlines()
numbers = [int(i) for i in numbers.split()]

f = open('sort.out', 'w')
f.write(' '.join(str(x) for x in merge_sort(0, len(numbers))))
