import re
from string import ascii_lowercase

class MyQueue:
    def __init__(self, lst=[]):
        self.q = []
        self.out = 0
    def enqueue(self, seq):
        self.q.append(seq)
    def dequeue(self):
        k = self.q[self.out]
        self.out += 1
        return k

queue = MyQueue()
registers = dict(zip(ascii_lowercase, range(1,27)))
trunc = 65535
labels = {}
ip = 0

def safe_div(a, b):
    try:
        result = a // b
    except ZeroDivisionError:
        result = 0
    return result

def safe_mod(a, b):
    try:
        result = a % b
    except ZeroDivisionError:
        result = 0
    return result

def set_register(register):
    registers[register] = queue.dequeue()

def set_ip(new_ip):
    global ip
    ip = new_ip

def jmp(label_name):
    set_ip(labels[label_name])

actions = {
    # add
    re.compile(r"\+$"): (lambda _: queue.enqueue((queue.dequeue() + queue.dequeue()) & trunc)),
    # sub
    re.compile(r"-$"): (lambda _: queue.enqueue((queue.dequeue() - queue.dequeue()) & trunc)),
    # mul
    re.compile(r"\*$"): (lambda _: queue.enqueue((queue.dequeue() * queue.dequeue()) & trunc)),
    # div
    re.compile(r"/$"): (lambda _: queue.enqueue(safe_div(queue.dequeue(), queue.dequeue()) & trunc)),
    # mod
    re.compile(r"%$"): (lambda _: queue.enqueue(safe_mod(queue.dequeue(), queue.dequeue()) & trunc)),
    # set register
    re.compile(r">([a-z])$"): (lambda m: set_register(m.group(1))),
    # get register
    re.compile(r"<([a-z])$"): (lambda m: queue.enqueue(registers[m.group(1)])),
    # print
    re.compile(r"P$"): (lambda _: f.write('{}\n'.format(queue.dequeue()))),
    # print register
    re.compile(r"P([a-z])$"): (lambda m: f.write('{}\n'.format(registers[m.group(1)]))),
    # print as char
    re.compile(r"C$"): (lambda m: f.write('{}'.format(chr(queue.dequeue() & 255)))),
    # print as char register
    re.compile(r"^C([a-z])$"): (lambda m: f.write('{}'.format(chr(registers[m.group(1)] & 255)))),
    # label
    # re.compile(r":(\w+)$"): (lambda _: _),
    # jmp
    re.compile(r"J(\w+)$"): (lambda m: jmp(m.group(1))),
    # jz
    re.compile(r"Z([a-z])(\w+)$"): (lambda m: jmp(m.group(2)) if registers[m.group(1)] == 0 else None),
    # je
    re.compile(r"E([a-z])([a-z])(\w+)$"): (lambda m: jmp(m.group(3)) if registers[m.group(1)] == registers[m.group(2)] else None),
    # jg
    re.compile(r"G([a-z])([a-z])(\w+)$"): (lambda m: jmp(m.group(3)) if registers[m.group(1)] > registers[m.group(2)] else None),
    # quit
    re.compile(r"Q$"): (lambda _: set_ip(-100)),
    # number
    re.compile(r"(\d+)$"): (lambda m: queue.enqueue(int(m.group(1))))
}

f = open('quack.in', 'r')
program = f.readlines()
f.close()

# обработать метки
regex = re.compile(r":(\w+)$")
for i in range(len(program)):
    m = regex.match(program[i])
    if m is None:
        continue
    labels[m.group(1)] = i

f = open('quack.out', 'w', newline='')
while ip > -1 and ip != len(program):
    for regex in actions:
        res = regex.match(program[ip])
        if res is None:
            continue

        actions[regex](res)
    ip += 1
